version: 2.1
orbs:
  artifactory-orb: jfrog/artifactory-orb@1.0.1
  aws-ecr: circleci/aws-ecr@6.15.3
jobs:
  build:
    docker:
      - image: alpine:latest
    steps:
      - checkout

      # se descargan e instalan las dependencias
      - run:
          name: "Setup environment"
          command: |
            apk update
            apk add gradle
            apk add --no-cache nodejs zip openjdk11-jre-headless
            apk add curl
            apk add jq
            # se descargan e instalan las dependencias
      - run:
          name: "compile project"
          command: |
            gradle clean build test jacocoTestReport
            
      # se descarga el cliente de scan de sonarqube
      - run:
          name: "Install Sonarqube scanner"
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873.zip
            unzip sonar-scanner-cli-4.2.0.1873.zip

# se ejecuta el an√°lisis invocando al cliente y especificando como argumentos y como variables de entorno (especificadas en CCI)
#${CIRCLE_USERNAME}_${CIRCLE_PROJECT_REPONAME}
      - run:
          name: Code analysis
          command: |
            export SONAR_RUNNER_OPTS="-Xms1024m -Xmx4096m"
            eval ./sonar-scanner-4.2.0.1873/bin/sonar-scanner \
              -Dsonar.host.url="https://sonarcloud.io/" \
              -Dsonar.login=$token \
              -Dsonar.java.binaries=. \
              -Dsonar.organization=${CIRCLE_USERNAME} \
              -Dsonar.projectKey=${CIRCLE_USERNAME}_${CIRCLE_PROJECT_REPONAME} \
              -Dsonar.sources="." \
              -Dsonar.exclusions="**/*.yaml,**/*.yml"

  publish-on-artifactory:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: Install jFrog CLI
          command: sudo chmod -R 777 /var/opt/
          
      - run: curl -fL https://getcli.jfrog.io | sh

     # - run: gradle build

    #  - run: ./jfrog rt config --url $ARTIFACTORY_URL --user $ARTIFACTORY_USER --apikey $ARTIFACTORY_APIKEY --interactive=false

     # - run: chmod +x gradlew
      
      #- run: ./jfrog rt gradle-config --use-wrapper=true --repo-resolve=remote-backend-dev --server-id-resolve=Default-Server --repo-deploy=local-backend-dev --server-id-deploy=Default-Server

     # - run: ./jfrog rt gradle clean build artifactoryPublish -b build.gradle


workflows:
  build_and_test:
    jobs:
      - build:
          context:
            - sonarCloud
      - publish-on-artifactory:
         requires:
            - build
         filters:
            branches:
              only: main