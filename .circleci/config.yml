version: 2.1

workflows:
  build:
    jobs:
      - build:
          context:
            - sonarCloud
jobs:
  build:
    docker:
      - image: alpine:latest
    steps:
      - checkout

      # se descargan e instalan las dependencias
      - run:
          name: "Setup environment"
          command: |
            apk update
            apk add gradle
            apk add --no-cache nodejs zip openjdk11-jre-headless
            apk add curl
            apk add jq
            # se descargan e instalan las dependencias
      - run:
          name: "compile project"
          command: |
            gradle clean build test jacocoTestReport
            
      # se descarga el cliente de scan de sonarqube
      - run:
          name: "Install Sonarqube scanner"
          command: |
            wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.2.0.1873.zip
            unzip sonar-scanner-cli-4.2.0.1873.zip

# se ejecuta el an√°lisis invocando al cliente y especificando como argumentos y como variables de entorno (especificadas en CCI)
#${CIRCLE_USERNAME}_${CIRCLE_PROJECT_REPONAME}
      - run:
          name: Code analysis
          command: |
            export SONAR_RUNNER_OPTS="-Xms1024m -Xmx4096m"
            eval ./sonar-scanner-4.2.0.1873/bin/sonar-scanner \
              -Dsonar.host.url="https://sonarcloud.io/" \
              -Dsonar.login=$token \
              -Dsonar.java.binaries=. \
              -Dsonar.organization="sebameruane" \
              -Dsonar.projectKey="sebameruane_DevopsPrueba2" \
              -Dsonar.sources="." \
              -Dsonar.exclusions="**/*.yaml,**/*.yml"

      - run:
          name: Check quality gate
          command: |
            REPORT_PATH=".scannerwork/report-task.txt"
            CE_TASK_ID_KEY="ceTaskId="

            SONAR_INSTANCE="https://sonarcloud.io"
            SLEEP_TIME=5

            # get the compute engine task id
            ce_task_id=$(cat $REPORT_PATH | grep $CE_TASK_ID_KEY | cut -d'=' -f2)
            echo "Using task id of ${ce_task_id}"

            if [ -z "$ce_task_id" ]; then
              echo "No task id found"
              exit 1
            fi

            # grab the status of the task
            # if CANCELLED or FAILED, fail the Build
            # if SUCCESS, stop waiting and grab the analysisId
            wait_for_success=true

            while [ "${wait_for_success}" = "true" ]
            do
              ce_status=$(curl -s -u "${token}": "${SONAR_INSTANCE}"/api/ce/task?id=${ce_task_id} | jq -r .task.status)

              echo "Status of SonarQube task is ${ce_status}"

              if [ "${ce_status}" = "CANCELLED" ]; then
                echo "SonarQube Compute job has been cancelled - exiting with error"
                exit 504
              fi

              if [ "${ce_status}" = "FAILED" ]; then
                echo "SonarQube Compute job has failed - exit with error"
                exit 500
              fi

              if [ "${ce_status}" = "SUCCESS" ]; then
                wait_for_success=false
              fi

              sleep "${SLEEP_TIME}"

            done

            ce_analysis_id=$(curl -s -u ${token}: $SONAR_INSTANCE/api/ce/task?id=$ce_task_id | jq -r .task.analysisId)
            echo "Using analysis id of ${ce_analysis_id}"

            # get the status of the quality gate for this analysisId
            qg_status=$(curl -s -u ${token}: $SONAR_INSTANCE/api/qualitygates/project_status?analysisId="${ce_analysis_id}" | jq -r .projectStatus.status)
            echo "Quality Gate status is ${qg_status}"

            if [ "${qg_status}" != "OK" ]; then
              echo "Quality gate is not OK - exiting with error"
              exit 1
            fi